@page "/vaults"
@using Microsoft.AspNetCore.Authorization
@inject VaultService VaultService
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>My Vaults</PageTitle>

<h1>My Vaults</h1>

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateVaultDialog">
        Create Vault
    </MudButton>

    @if (vaults == null || !vaults.Any())
    {
        <MudText Color="Color.Secondary">Create your first vault!</MudText>
    }
    else
    {
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudList T="VaultService.Vault" Dense="false">
                @foreach (var vault in vaults)
                {
                    <MudListItem T="VaultService.Vault"
                                 Selected="@(selectedVault?.Id == vault.Id)"
                                 OnClick="() => SelectVault(vault)"
                                 Class="vault-list-item"
                                 DisableRipple="false">
                        <MudText>@vault.Name</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudContainer>
    }
</MudContainer>

@code {
    private List<VaultService.Vault> vaults = new();
    private VaultService.Vault? selectedVault;

    protected override async Task OnInitializedAsync()
    {
        // Récupération initiale des vaults existants
        //vaults = await VaultService.GetAllVaultsAsync();
    }

    private async Task SelectVault(VaultService.Vault vault)
    {
        selectedVault = vault;
        await OpenPasswordDialog(vault);
    }

    private async Task OpenCreateVaultDialog()
    {
        var parameters = new DialogParameters
        {
            { "OnSave", EventCallback.Factory.Create<VaultService.Vault>(this, AddVault) }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        DialogService.Show<CreateVaultDialog>("Create Vault", parameters, options);
    }

    private void AddVault(VaultService.Vault newVault)
    {
        vaults.Add(newVault);
        StateHasChanged();
    }

    private async Task OpenPasswordDialog(VaultService.Vault vault)
    {
        var parameters = new DialogParameters
        {
            { "Vault", vault }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        DialogService.Show<PasswordDialog>("Enter Password", parameters, options);
    }
}
